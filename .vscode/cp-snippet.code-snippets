{
	// Place your cp ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"template": {
		"body":[
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using ll = long long;",
			"#define ALL(v) v.begin(),v.end()",
			"#define sz(v) (int)(v.size())",
			"",
			"int main(){",
			"",
			"}",
		],
		"prefix": "tmpl"
	}, 
	"out": {
    "body": "cout << ${1:ans} << \"\\n\";",
    "prefix": "out"
	},
	"for": {
		"body": "for(int ${1} = 0; ${1} < ${2}; ${1}++) {}",
		"prefix": "fr"
	},
	"PI": {
		"body": "const double PI = acos(-1.0);",
		"prefix": "enshuritu",
	},
	"dxdy": {
		"body": [
			"ll dx[] = {1, 0, -1, 0};",
			"ll dy[] = {0, 1, 0, -1};",
		],
		"prefix": "dxdy",
	},
	"dxdy2": {
		"body": [
			"ll dx[] = {1, 1, 0, -1, -1, -1,  0,  1};",
			"ll dy[] = {0, 1, 1,  1,  0, -1, -1, -1};",
		],
		"prefix": "dxdy2",
	},
	"mod1": {
		"body": "const ll MOD = 1000000007;",
		"prefix": "mod1",
	},
	"mod2": {
		"body": "const ll MOD = 998244353;",
		"prefix": "mod2",
	},
	"comment": {
		"body": [
			"/**",
			" */",
		],
		"prefix": "comment",
	},
	"pi": {
		"body": "#define pi pair<int, int>",
		"prefix": "pi",
	},
	"chmax": {
		"body": "#define chmax(a, b) a = max(a, b)",
		"prefix": "chmax",
	},
	"chmin": {
		"body": "#define chmin(a, b) a = min(a, b)",
		"prefix": "chmin",
	},
	"gcd": {
		"body":[
			"ll gcd(ll a,ll b){",
			"\tif(a%b==0)return b;",
			"\treturn gcd(b, a%b);",
			"}"
		],
		"prefix":"gcd",
	},
	"lcm": {
		"body":[
			"ll lcm(ll a,ll b){",
			"\treturn a/gcd(a,b)*b;",
			"}",
		],
		"prefix":"lcm",
	},
	"ifdefd": {
		"body":[
			"#ifdef DEBUG",
			"#endif",
		],
		"prefix": "ifdefd",
	},
	"inf": {
		"body":"const ll inf = LONG_LONG_MAX;",
		"prefix": "inf",
	},
	"atcoder": {
		"body":[
			"#include <atcoder/all>",
			"using namespace atcoder;"
		],
		"prefix": "atcoder",
	},
	"alpabetcnt": {
		"body": "#define ALPHABET_CNT 26",
		"prefix": "alphabetcnt",
	},
	"overflow": {
		"body": [
			"// a + b がオーバーフローするならtrueを返す",
			"template <class T> bool overflow_if_add(T a, T b) {",
			"  return (std::numeric_limits<T>::max() - a) < b;",
			"}",
			"",
			"// a * b がオーバーフローするならtrueを返す",
			"template <class T> bool overflow_if_mul(T a, T b) {",
			"  return (std::numeric_limits<T>::max() / a) < b;",
			"}",
		],
		"prefix": "overflow",
	},
	"tmpl2": {
		"body" : [
			"#ifndef INCLUDED_MAIN",
			"#define INCLUDED_MAIN",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#include <atcoder/all>",
			"using namespace atcoder;",
			"using ll = long long;",
			"#define ALL(v) v.begin(), v.end()",
			"#define SZ(v) (int)(v.size())",
			"",
			"#include __FILE__",
			"",
			"int main() {",
			"${1}",
			"}",
			"",
			"/*-----------------------------------------------------------",
			"-----------------------------------------------------------*/",
			"",
			"#else // INCLUDED_MAIN",
			"",
			"// clang-format off",
			"#define cauto const auto&",
			"",
			"#define OVERLOAD_REP(_1, _2, _3, _4, name, ...) name",
			"#define REP1(i, n) REP3(i, 0, n, 1)",
			"#define REP2(i, a, b) REP3(i, a, b, 1)",
			"#define REP3(i, a, b, c) for (int i = int(a); i < int(b); i += c)",
			"#define REP(...) OVERLOAD_REP(__VA_ARGS__, REP3, REP2, REP1, )(__VA_ARGS__)",
			"",
			"#define OVERLOAD_REPR(_1, _2, _3, _4, name, ...) name",
			"#define REPR1(i, n) REPR3(i, 0, n, 1)",
			"#define REPR2(i, a, b) REPR3(i, a, b, 1)",
			"#define REPR3(i, a, b, c) for (int i = int(b) - 1; i >= int(a); i -= c)",
			"#define REPR(...) OVERLOAD_REPR(__VA_ARGS__, REPR3, REPR2, REPR1, )(__VA_ARGS__)",
			"",
			"#define OVERLOAD_REPE(_1, _2, _3, _4, name, ...) name",
			"#define REPE1(i, n) REPE3(i, 0, n, 1)",
			"#define REPE2(i, a, b) REPE3(i, a, b, 1)",
			"#define REPE3(i, a, b, c) for (int i = int(a); i <= int(b); i += c)",
			"#define REPE(...) OVERLOAD_REPE(__VA_ARGS__, REPE3, REPE2, REPE1, )(__VA_ARGS__)",
			"",
			"#define OVERLOAD_REPRE(_1, _2, _3, _4, name, ...) name",
			"#define REPRE1(i, n) REPRE3(i, 0, n, 1)",
			"#define REPRE2(i, a, b) REPRE3(i, a, b, 1)",
			"#define REPRE3(i, a, b, c) for (int i = int(b); i >= int(a); i -= c)",
			"#define REPRE(...) OVERLOAD_REPRE(__VA_ARGS__, REPRE3, REPRE2, REPE1, )(__VA_ARGS__)",
			"",
			"template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }",
			"template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }",
			"",
			"template< typename T, typename U >",
			"static inline vector<U> make_vec(T&& n, U&& val) noexcept {",
			"  return vector<U>(forward<T>(n), forward<U>(val)); ",
			"}",
			"template< typename T, typename... Args >",
			"static inline decltype(auto) make_vec(T&& n, Args&&... args) noexcept {",
			"  return vector<decltype(make_vec(forward<Args>(args)...))>(forward<T>(n), make_vec(forward<Args>(args)...));",
			"}",
			"",
			"struct input { ",
			"  int n; input() {} input(int n_) : n(n_){};",
			"  template <class T> operator T() { T ret; cin >> ret; return ret; }",
			"  template <class T> operator vector<T>() { vector<T> ret(n); for (int i = 0; i < n; i++) cin >> ret[i]; return ret; }",
			"};",
			"// clang-format on",
			"",
			"#ifdef LOCAL",
			"#include <debug.hpp>",
			"#define deb(...) debug::multi_print(#__VA_ARGS__, __VA_ARGS__)",
			"#else",
			"#define deb(...) (static_cast<void>(0))",
			"#endif",
			"",
			"#endif // INCLUDED_MAIN",
		],
		"prefix": "tmpl2",
	},
}